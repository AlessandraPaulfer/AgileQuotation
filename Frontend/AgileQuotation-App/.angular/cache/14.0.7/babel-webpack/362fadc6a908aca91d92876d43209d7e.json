{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Pipe, Component, ChangeDetectionStrategy, Optional, Inject, Input, ViewChild, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"overlay\"];\n\nfunction NgxSpinnerComponent_div_0_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nfunction NgxSpinnerComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxSpinnerComponent_div_0_div_2_div_1_Template, 1, 0, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.spinner.class);\n    i0.ɵɵstyleProp(\"color\", ctx_r2.spinner.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.spinner.divArray);\n  }\n}\n\nfunction NgxSpinnerComponent_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n    i0.ɵɵpipe(1, \"safeHtml\");\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind1(1, 1, ctx_r3.template), i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction NgxSpinnerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1, 2);\n    i0.ɵɵtemplate(2, NgxSpinnerComponent_div_0_div_2_Template, 2, 5, \"div\", 3);\n    i0.ɵɵtemplate(3, NgxSpinnerComponent_div_0_div_3_Template, 2, 3, \"div\", 4);\n    i0.ɵɵelementStart(4, \"div\", 5);\n    i0.ɵɵprojection(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r0.spinner.bdColor)(\"z-index\", ctx_r0.spinner.zIndex)(\"position\", ctx_r0.spinner.fullScreen ? \"fixed\" : \"absolute\");\n    i0.ɵɵproperty(\"@.disabled\", ctx_r0.disableAnimation)(\"@fadeIn\", \"in\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.template);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.template);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"z-index\", ctx_r0.spinner.zIndex);\n  }\n}\n\nconst _c1 = [\"*\"];\nconst LOADERS = {\n  \"ball-8bits\": 16,\n  \"ball-atom\": 4,\n  \"ball-beat\": 3,\n  \"ball-circus\": 5,\n  \"ball-climbing-dot\": 4,\n  \"ball-clip-rotate\": 1,\n  \"ball-clip-rotate-multiple\": 2,\n  \"ball-clip-rotate-pulse\": 2,\n  \"ball-elastic-dots\": 5,\n  \"ball-fall\": 3,\n  \"ball-fussion\": 4,\n  \"ball-grid-beat\": 9,\n  \"ball-grid-pulse\": 9,\n  \"ball-newton-cradle\": 4,\n  \"ball-pulse\": 3,\n  \"ball-pulse-rise\": 5,\n  \"ball-pulse-sync\": 3,\n  \"ball-rotate\": 1,\n  \"ball-running-dots\": 5,\n  \"ball-scale\": 1,\n  \"ball-scale-multiple\": 3,\n  \"ball-scale-pulse\": 2,\n  \"ball-scale-ripple\": 1,\n  \"ball-scale-ripple-multiple\": 3,\n  \"ball-spin\": 8,\n  \"ball-spin-clockwise\": 8,\n  \"ball-spin-clockwise-fade\": 8,\n  \"ball-spin-clockwise-fade-rotating\": 8,\n  \"ball-spin-fade\": 8,\n  \"ball-spin-fade-rotating\": 8,\n  \"ball-spin-rotate\": 2,\n  \"ball-square-clockwise-spin\": 8,\n  \"ball-square-spin\": 8,\n  \"ball-triangle-path\": 3,\n  \"ball-zig-zag\": 2,\n  \"ball-zig-zag-deflect\": 2,\n  cog: 1,\n  \"cube-transition\": 2,\n  fire: 3,\n  \"line-scale\": 5,\n  \"line-scale-party\": 5,\n  \"line-scale-pulse-out\": 5,\n  \"line-scale-pulse-out-rapid\": 5,\n  \"line-spin-clockwise-fade\": 8,\n  \"line-spin-clockwise-fade-rotating\": 8,\n  \"line-spin-fade\": 8,\n  \"line-spin-fade-rotating\": 8,\n  pacman: 6,\n  \"square-jelly-box\": 2,\n  \"square-loader\": 1,\n  \"square-spin\": 1,\n  timer: 1,\n  \"triangle-skew-spin\": 1\n};\nconst DEFAULTS = {\n  BD_COLOR: \"rgba(51,51,51,0.8)\",\n  SPINNER_COLOR: \"#fff\",\n  Z_INDEX: 99999\n};\nconst PRIMARY_SPINNER = \"primary\";\n\nclass NgxSpinner {\n  constructor(init) {\n    Object.assign(this, init);\n  }\n\n  static create(init) {\n    if (!init?.template && !init?.type) {\n      console.warn(`[ngx-spinner]: Property \"type\" is missed. Please, provide animation type to <ngx-spinner> component\n        and ensure css is added to angular.json file`);\n    }\n\n    return new NgxSpinner(init);\n  }\n\n}\n\nclass NgxSpinnerService {\n  /**\n   * Creates an instance of NgxSpinnerService.\n   * @memberof NgxSpinnerService\n   */\n  constructor() {\n    /**\n     * Spinner observable\n     *\n     * @memberof NgxSpinnerService\n     */\n    // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n    this.spinnerObservable = new BehaviorSubject(null);\n  }\n  /**\n   * Get subscription of desired spinner\n   * @memberof NgxSpinnerService\n   **/\n\n\n  getSpinner(name) {\n    return this.spinnerObservable.asObservable().pipe(filter(x => x && x.name === name));\n  }\n  /**\n   * To show spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n\n\n  show(name = PRIMARY_SPINNER, spinner) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        if (spinner && Object.keys(spinner).length) {\n          spinner[\"name\"] = name;\n          this.spinnerObservable.next(new NgxSpinner({ ...spinner,\n            show: true\n          }));\n          resolve(true);\n        } else {\n          this.spinnerObservable.next(new NgxSpinner({\n            name,\n            show: true\n          }));\n          resolve(true);\n        }\n      }, 10);\n    });\n  }\n  /**\n   * To hide spinner\n   *\n   * @memberof NgxSpinnerService\n   */\n\n\n  hide(name = PRIMARY_SPINNER, debounce = 10) {\n    return new Promise((resolve, _reject) => {\n      setTimeout(() => {\n        this.spinnerObservable.next(new NgxSpinner({\n          name,\n          show: false\n        }));\n        resolve(true);\n      }, debounce);\n    });\n  }\n\n  static #_ = this.ɵfac = function NgxSpinnerService_Factory(t) {\n    return new (t || NgxSpinnerService)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgxSpinnerService,\n    factory: NgxSpinnerService.ɵfac,\n    providedIn: \"root\"\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nconst NGX_SPINNER_CONFIG = new InjectionToken(\"NGX_SPINNER_CONFIG\");\n\nclass SafeHtmlPipe {\n  constructor(_sanitizer) {\n    this._sanitizer = _sanitizer;\n  }\n\n  transform(v) {\n    if (v) {\n      return this._sanitizer.bypassSecurityTrustHtml(v);\n    }\n  }\n\n  static #_ = this.ɵfac = function SafeHtmlPipe_Factory(t) {\n    return new (t || SafeHtmlPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n  };\n  static #_2 = this.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"safeHtml\",\n    type: SafeHtmlPipe,\n    pure: true\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SafeHtmlPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"safeHtml\"\n    }]\n  }], function () {\n    return [{\n      type: i1.DomSanitizer\n    }];\n  }, null);\n})();\n\nclass NgxSpinnerComponent {\n  // TODO: https://github.com/Napster2210/ngx-spinner/issues/259\n  // @HostListener(\"document:keydown\", [\"$event\"])\n  // handleKeyboardEvent(event: KeyboardEvent) {\n  //   if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n  //     if (\n  //       this.fullScreen ||\n  //       (!this.fullScreen && this.isSpinnerZone(event.target))\n  //     ) {\n  //       event.returnValue = false;\n  //       event.preventDefault();\n  //     }\n  //   }\n  // }\n\n  /**\n   * Creates an instance of NgxSpinnerComponent.\n   *\n   * @memberof NgxSpinnerComponent\n   */\n  constructor(spinnerService, changeDetector, elementRef, globalConfig) {\n    this.spinnerService = spinnerService;\n    this.changeDetector = changeDetector;\n    this.elementRef = elementRef;\n    this.globalConfig = globalConfig;\n    /**\n     * To enable/disable animation\n     *\n     * @type {boolean}\n     * @memberof NgxSpinnerComponent\n     */\n\n    this.disableAnimation = false;\n    /**\n     * Spinner Object\n     *\n     * @memberof NgxSpinnerComponent\n     */\n\n    this.spinner = new NgxSpinner();\n    /**\n     * Unsubscribe from spinner's observable\n     *\n     * @memberof NgxSpinnerComponent\n     **/\n\n    this.ngUnsubscribe = new Subject();\n    /**\n     * To set default ngx-spinner options\n     *\n     * @memberof NgxSpinnerComponent\n     */\n\n    this.setDefaultOptions = () => {\n      const {\n        type\n      } = this.globalConfig ?? {};\n      this.spinner = NgxSpinner.create({\n        name: this.name,\n        bdColor: this.bdColor,\n        size: this.size,\n        color: this.color,\n        type: this.type ?? type,\n        fullScreen: this.fullScreen,\n        divArray: this.divArray,\n        divCount: this.divCount,\n        show: this.show,\n        zIndex: this.zIndex,\n        template: this.template,\n        showSpinner: this.showSpinner\n      });\n    };\n\n    this.bdColor = DEFAULTS.BD_COLOR;\n    this.zIndex = DEFAULTS.Z_INDEX;\n    this.color = DEFAULTS.SPINNER_COLOR;\n    this.size = \"large\";\n    this.fullScreen = true;\n    this.name = PRIMARY_SPINNER;\n    this.template = null;\n    this.showSpinner = false;\n    this.divArray = [];\n    this.divCount = 0;\n    this.show = false;\n  }\n\n  initObservable() {\n    this.spinnerService.getSpinner(this.name).pipe(takeUntil(this.ngUnsubscribe)).subscribe(spinner => {\n      this.setDefaultOptions();\n      Object.assign(this.spinner, spinner);\n\n      if (spinner.show) {\n        this.onInputChange();\n      }\n\n      this.changeDetector.detectChanges();\n    });\n  }\n  /**\n   * Initialization method\n   *\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  ngOnInit() {\n    this.setDefaultOptions();\n    this.initObservable();\n  }\n  /**\n   * To check event triggers inside the Spinner Zone\n   *\n   * @param {*} element\n   * @returns {boolean}\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  isSpinnerZone(element) {\n    if (element === this.elementRef.nativeElement.parentElement) {\n      return true;\n    }\n\n    return element.parentNode && this.isSpinnerZone(element.parentNode);\n  }\n  /**\n   * On changes event for input variables\n   *\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  ngOnChanges(changes) {\n    for (const propName in changes) {\n      if (propName) {\n        const changedProp = changes[propName];\n\n        if (changedProp.isFirstChange()) {\n          return;\n        } else if (typeof changedProp.currentValue !== \"undefined\" && changedProp.currentValue !== changedProp.previousValue) {\n          if (changedProp.currentValue !== \"\") {\n            this.spinner[propName] = changedProp.currentValue;\n\n            if (propName === \"showSpinner\") {\n              if (changedProp.currentValue) {\n                this.spinnerService.show(this.spinner.name, this.spinner);\n              } else {\n                this.spinnerService.hide(this.spinner.name);\n              }\n            }\n\n            if (propName === \"name\") {\n              this.initObservable();\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To get class for spinner\n   *\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  getClass(type, size) {\n    this.spinner.divCount = LOADERS[type];\n    this.spinner.divArray = Array(this.spinner.divCount).fill(0).map((_, i) => i);\n    let sizeClass = \"\";\n\n    switch (size.toLowerCase()) {\n      case \"small\":\n        sizeClass = \"la-sm\";\n        break;\n\n      case \"medium\":\n        sizeClass = \"la-2x\";\n        break;\n\n      case \"large\":\n        sizeClass = \"la-3x\";\n        break;\n\n      default:\n        break;\n    }\n\n    return \"la-\" + type + \" \" + sizeClass;\n  }\n  /**\n   * Check if input variables have changed\n   *\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  onInputChange() {\n    this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n  }\n  /**\n   * Component destroy event\n   *\n   * @memberof NgxSpinnerComponent\n   */\n\n\n  ngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  static #_ = this.ɵfac = function NgxSpinnerComponent_Factory(t) {\n    return new (t || NgxSpinnerComponent)(i0.ɵɵdirectiveInject(NgxSpinnerService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NGX_SPINNER_CONFIG, 8));\n  };\n  static #_2 = this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxSpinnerComponent,\n    selectors: [[\"ngx-spinner\"]],\n    viewQuery: function NgxSpinnerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.spinnerDOM = _t.first);\n      }\n    },\n    inputs: {\n      bdColor: \"bdColor\",\n      size: \"size\",\n      color: \"color\",\n      type: \"type\",\n      fullScreen: \"fullScreen\",\n      name: \"name\",\n      zIndex: \"zIndex\",\n      template: \"template\",\n      showSpinner: \"showSpinner\",\n      disableAnimation: \"disableAnimation\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"ngx-spinner-overlay\", 3, \"background-color\", \"z-index\", \"position\", 4, \"ngIf\"], [1, \"ngx-spinner-overlay\"], [\"overlay\", \"\"], [3, \"class\", \"color\", 4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [1, \"loading-text\"], [4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\"]],\n    template: function NgxSpinnerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, NgxSpinnerComponent_div_0_Template, 6, 12, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.spinner.show);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, SafeHtmlPipe],\n    styles: [\".ngx-spinner-overlay[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text[_ngcontent-%COMP%]{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\"],\n    data: {\n      animation: [trigger(\"fadeIn\", [state(\"in\", style({\n        opacity: 1\n      })), transition(\":enter\", [style({\n        opacity: 0\n      }), animate(300)]), transition(\":leave\", animate(200, style({\n        opacity: 0\n      })))])]\n    },\n    changeDetection: 0\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-spinner\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger(\"fadeIn\", [state(\"in\", style({\n        opacity: 1\n      })), transition(\":enter\", [style({\n        opacity: 0\n      }), animate(300)]), transition(\":leave\", animate(200, style({\n        opacity: 0\n      })))])],\n      template: \"<div\\n  [@.disabled]=\\\"disableAnimation\\\"\\n  [@fadeIn]=\\\"'in'\\\"\\n  *ngIf=\\\"spinner.show\\\"\\n  class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\"\\n  [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\"\\n  #overlay\\n>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\\n\",\n      styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxSpinnerService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NGX_SPINNER_CONFIG]\n      }]\n    }];\n  }, {\n    bdColor: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    fullScreen: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    showSpinner: [{\n      type: Input\n    }],\n    disableAnimation: [{\n      type: Input\n    }],\n    spinnerDOM: [{\n      type: ViewChild,\n      args: [\"overlay\"]\n    }]\n  });\n})();\n\nclass NgxSpinnerModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxSpinnerModule,\n      providers: [{\n        provide: NGX_SPINNER_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n\n  static #_ = this.ɵfac = function NgxSpinnerModule_Factory(t) {\n    return new (t || NgxSpinnerModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxSpinnerModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n      exports: [NgxSpinnerComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-spinner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULTS, LOADERS, NgxSpinner, NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, PRIMARY_SPINNER };","map":{"version":3,"names":["i0","Injectable","InjectionToken","Pipe","Component","ChangeDetectionStrategy","Optional","Inject","Input","ViewChild","NgModule","BehaviorSubject","Subject","filter","takeUntil","trigger","state","style","transition","animate","i2","CommonModule","i1","LOADERS","cog","fire","pacman","timer","DEFAULTS","BD_COLOR","SPINNER_COLOR","Z_INDEX","PRIMARY_SPINNER","NgxSpinner","constructor","init","Object","assign","create","template","type","console","warn","NgxSpinnerService","spinnerObservable","getSpinner","name","asObservable","pipe","x","show","spinner","Promise","resolve","_reject","setTimeout","keys","length","next","hide","debounce","ɵfac","ɵprov","args","providedIn","NGX_SPINNER_CONFIG","SafeHtmlPipe","_sanitizer","transform","v","bypassSecurityTrustHtml","DomSanitizer","ɵpipe","NgxSpinnerComponent","spinnerService","changeDetector","elementRef","globalConfig","disableAnimation","ngUnsubscribe","setDefaultOptions","bdColor","size","color","fullScreen","divArray","divCount","zIndex","showSpinner","initObservable","subscribe","onInputChange","detectChanges","ngOnInit","isSpinnerZone","element","nativeElement","parentElement","parentNode","ngOnChanges","changes","propName","changedProp","isFirstChange","currentValue","previousValue","getClass","Array","fill","map","_","i","sizeClass","toLowerCase","class","ngOnDestroy","complete","ChangeDetectorRef","ElementRef","ɵcmp","NgForOf","NgIf","opacity","selector","changeDetection","OnPush","animations","styles","undefined","decorators","spinnerDOM","NgxSpinnerModule","forRoot","config","ngModule","providers","provide","useValue","ɵmod","ɵinj","imports","declarations","exports"],"sources":["E:/Project/AgileQuotation/Frontend/AgileQuotation-App/node_modules/ngx-spinner/fesm2022/ngx-spinner.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Pipe, Component, ChangeDetectionStrategy, Optional, Inject, Input, ViewChild, NgModule } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@angular/platform-browser';\n\nconst LOADERS = {\n    \"ball-8bits\": 16,\n    \"ball-atom\": 4,\n    \"ball-beat\": 3,\n    \"ball-circus\": 5,\n    \"ball-climbing-dot\": 4,\n    \"ball-clip-rotate\": 1,\n    \"ball-clip-rotate-multiple\": 2,\n    \"ball-clip-rotate-pulse\": 2,\n    \"ball-elastic-dots\": 5,\n    \"ball-fall\": 3,\n    \"ball-fussion\": 4,\n    \"ball-grid-beat\": 9,\n    \"ball-grid-pulse\": 9,\n    \"ball-newton-cradle\": 4,\n    \"ball-pulse\": 3,\n    \"ball-pulse-rise\": 5,\n    \"ball-pulse-sync\": 3,\n    \"ball-rotate\": 1,\n    \"ball-running-dots\": 5,\n    \"ball-scale\": 1,\n    \"ball-scale-multiple\": 3,\n    \"ball-scale-pulse\": 2,\n    \"ball-scale-ripple\": 1,\n    \"ball-scale-ripple-multiple\": 3,\n    \"ball-spin\": 8,\n    \"ball-spin-clockwise\": 8,\n    \"ball-spin-clockwise-fade\": 8,\n    \"ball-spin-clockwise-fade-rotating\": 8,\n    \"ball-spin-fade\": 8,\n    \"ball-spin-fade-rotating\": 8,\n    \"ball-spin-rotate\": 2,\n    \"ball-square-clockwise-spin\": 8,\n    \"ball-square-spin\": 8,\n    \"ball-triangle-path\": 3,\n    \"ball-zig-zag\": 2,\n    \"ball-zig-zag-deflect\": 2,\n    cog: 1,\n    \"cube-transition\": 2,\n    fire: 3,\n    \"line-scale\": 5,\n    \"line-scale-party\": 5,\n    \"line-scale-pulse-out\": 5,\n    \"line-scale-pulse-out-rapid\": 5,\n    \"line-spin-clockwise-fade\": 8,\n    \"line-spin-clockwise-fade-rotating\": 8,\n    \"line-spin-fade\": 8,\n    \"line-spin-fade-rotating\": 8,\n    pacman: 6,\n    \"square-jelly-box\": 2,\n    \"square-loader\": 1,\n    \"square-spin\": 1,\n    timer: 1,\n    \"triangle-skew-spin\": 1,\n};\nconst DEFAULTS = {\n    BD_COLOR: \"rgba(51,51,51,0.8)\",\n    SPINNER_COLOR: \"#fff\",\n    Z_INDEX: 99999,\n};\nconst PRIMARY_SPINNER = \"primary\";\nclass NgxSpinner {\n    constructor(init) {\n        Object.assign(this, init);\n    }\n    static create(init) {\n        if (!init?.template && !init?.type) {\n            console.warn(`[ngx-spinner]: Property \"type\" is missed. Please, provide animation type to <ngx-spinner> component\n        and ensure css is added to angular.json file`);\n        }\n        return new NgxSpinner(init);\n    }\n}\n\nclass NgxSpinnerService {\n    /**\n     * Creates an instance of NgxSpinnerService.\n     * @memberof NgxSpinnerService\n     */\n    constructor() {\n        /**\n         * Spinner observable\n         *\n         * @memberof NgxSpinnerService\n         */\n        // private spinnerObservable = new ReplaySubject<NgxSpinner>(1);\n        this.spinnerObservable = new BehaviorSubject(null);\n    }\n    /**\n     * Get subscription of desired spinner\n     * @memberof NgxSpinnerService\n     **/\n    getSpinner(name) {\n        return this.spinnerObservable\n            .asObservable()\n            .pipe(filter((x) => x && x.name === name));\n    }\n    /**\n     * To show spinner\n     *\n     * @memberof NgxSpinnerService\n     */\n    show(name = PRIMARY_SPINNER, spinner) {\n        return new Promise((resolve, _reject) => {\n            setTimeout(() => {\n                if (spinner && Object.keys(spinner).length) {\n                    spinner[\"name\"] = name;\n                    this.spinnerObservable.next(new NgxSpinner({ ...spinner, show: true }));\n                    resolve(true);\n                }\n                else {\n                    this.spinnerObservable.next(new NgxSpinner({ name, show: true }));\n                    resolve(true);\n                }\n            }, 10);\n        });\n    }\n    /**\n     * To hide spinner\n     *\n     * @memberof NgxSpinnerService\n     */\n    hide(name = PRIMARY_SPINNER, debounce = 10) {\n        return new Promise((resolve, _reject) => {\n            setTimeout(() => {\n                this.spinnerObservable.next(new NgxSpinner({ name, show: false }));\n                resolve(true);\n            }, debounce);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerService, providedIn: \"root\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: \"root\",\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst NGX_SPINNER_CONFIG = new InjectionToken(\"NGX_SPINNER_CONFIG\");\n\nclass SafeHtmlPipe {\n    constructor(_sanitizer) {\n        this._sanitizer = _sanitizer;\n    }\n    transform(v) {\n        if (v) {\n            return this._sanitizer.bypassSecurityTrustHtml(v);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SafeHtmlPipe, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Pipe }); }\n    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: SafeHtmlPipe, name: \"safeHtml\" }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: SafeHtmlPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: \"safeHtml\",\n                }]\n        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; } });\n\nclass NgxSpinnerComponent {\n    // TODO: https://github.com/Napster2210/ngx-spinner/issues/259\n    // @HostListener(\"document:keydown\", [\"$event\"])\n    // handleKeyboardEvent(event: KeyboardEvent) {\n    //   if (this.spinnerDOM && this.spinnerDOM.nativeElement) {\n    //     if (\n    //       this.fullScreen ||\n    //       (!this.fullScreen && this.isSpinnerZone(event.target))\n    //     ) {\n    //       event.returnValue = false;\n    //       event.preventDefault();\n    //     }\n    //   }\n    // }\n    /**\n     * Creates an instance of NgxSpinnerComponent.\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    constructor(spinnerService, changeDetector, elementRef, globalConfig) {\n        this.spinnerService = spinnerService;\n        this.changeDetector = changeDetector;\n        this.elementRef = elementRef;\n        this.globalConfig = globalConfig;\n        /**\n         * To enable/disable animation\n         *\n         * @type {boolean}\n         * @memberof NgxSpinnerComponent\n         */\n        this.disableAnimation = false;\n        /**\n         * Spinner Object\n         *\n         * @memberof NgxSpinnerComponent\n         */\n        this.spinner = new NgxSpinner();\n        /**\n         * Unsubscribe from spinner's observable\n         *\n         * @memberof NgxSpinnerComponent\n         **/\n        this.ngUnsubscribe = new Subject();\n        /**\n         * To set default ngx-spinner options\n         *\n         * @memberof NgxSpinnerComponent\n         */\n        this.setDefaultOptions = () => {\n            const { type } = this.globalConfig ?? {};\n            this.spinner = NgxSpinner.create({\n                name: this.name,\n                bdColor: this.bdColor,\n                size: this.size,\n                color: this.color,\n                type: this.type ?? type,\n                fullScreen: this.fullScreen,\n                divArray: this.divArray,\n                divCount: this.divCount,\n                show: this.show,\n                zIndex: this.zIndex,\n                template: this.template,\n                showSpinner: this.showSpinner,\n            });\n        };\n        this.bdColor = DEFAULTS.BD_COLOR;\n        this.zIndex = DEFAULTS.Z_INDEX;\n        this.color = DEFAULTS.SPINNER_COLOR;\n        this.size = \"large\";\n        this.fullScreen = true;\n        this.name = PRIMARY_SPINNER;\n        this.template = null;\n        this.showSpinner = false;\n        this.divArray = [];\n        this.divCount = 0;\n        this.show = false;\n    }\n    initObservable() {\n        this.spinnerService\n            .getSpinner(this.name)\n            .pipe(takeUntil(this.ngUnsubscribe))\n            .subscribe((spinner) => {\n            this.setDefaultOptions();\n            Object.assign(this.spinner, spinner);\n            if (spinner.show) {\n                this.onInputChange();\n            }\n            this.changeDetector.detectChanges();\n        });\n    }\n    /**\n     * Initialization method\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnInit() {\n        this.setDefaultOptions();\n        this.initObservable();\n    }\n    /**\n     * To check event triggers inside the Spinner Zone\n     *\n     * @param {*} element\n     * @returns {boolean}\n     * @memberof NgxSpinnerComponent\n     */\n    isSpinnerZone(element) {\n        if (element === this.elementRef.nativeElement.parentElement) {\n            return true;\n        }\n        return element.parentNode && this.isSpinnerZone(element.parentNode);\n    }\n    /**\n     * On changes event for input variables\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnChanges(changes) {\n        for (const propName in changes) {\n            if (propName) {\n                const changedProp = changes[propName];\n                if (changedProp.isFirstChange()) {\n                    return;\n                }\n                else if (typeof changedProp.currentValue !== \"undefined\" &&\n                    changedProp.currentValue !== changedProp.previousValue) {\n                    if (changedProp.currentValue !== \"\") {\n                        this.spinner[propName] = changedProp.currentValue;\n                        if (propName === \"showSpinner\") {\n                            if (changedProp.currentValue) {\n                                this.spinnerService.show(this.spinner.name, this.spinner);\n                            }\n                            else {\n                                this.spinnerService.hide(this.spinner.name);\n                            }\n                        }\n                        if (propName === \"name\") {\n                            this.initObservable();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * To get class for spinner\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    getClass(type, size) {\n        this.spinner.divCount = LOADERS[type];\n        this.spinner.divArray = Array(this.spinner.divCount)\n            .fill(0)\n            .map((_, i) => i);\n        let sizeClass = \"\";\n        switch (size.toLowerCase()) {\n            case \"small\":\n                sizeClass = \"la-sm\";\n                break;\n            case \"medium\":\n                sizeClass = \"la-2x\";\n                break;\n            case \"large\":\n                sizeClass = \"la-3x\";\n                break;\n            default:\n                break;\n        }\n        return \"la-\" + type + \" \" + sizeClass;\n    }\n    /**\n     * Check if input variables have changed\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    onInputChange() {\n        this.spinner.class = this.getClass(this.spinner.type, this.spinner.size);\n    }\n    /**\n     * Component destroy event\n     *\n     * @memberof NgxSpinnerComponent\n     */\n    ngOnDestroy() {\n        this.ngUnsubscribe.next();\n        this.ngUnsubscribe.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerComponent, deps: [{ token: NgxSpinnerService }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: NGX_SPINNER_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: NgxSpinnerComponent, selector: \"ngx-spinner\", inputs: { bdColor: \"bdColor\", size: \"size\", color: \"color\", type: \"type\", fullScreen: \"fullScreen\", name: \"name\", zIndex: \"zIndex\", template: \"template\", showSpinner: \"showSpinner\", disableAnimation: \"disableAnimation\" }, viewQueries: [{ propertyName: \"spinnerDOM\", first: true, predicate: [\"overlay\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div\\n  [@.disabled]=\\\"disableAnimation\\\"\\n  [@fadeIn]=\\\"'in'\\\"\\n  *ngIf=\\\"spinner.show\\\"\\n  class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\"\\n  [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\"\\n  #overlay\\n>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\\n\", styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"pipe\", type: SafeHtmlPipe, name: \"safeHtml\" }], animations: [\n            trigger(\"fadeIn\", [\n                state(\"in\", style({ opacity: 1 })),\n                transition(\":enter\", [style({ opacity: 0 }), animate(300)]),\n                transition(\":leave\", animate(200, style({ opacity: 0 }))),\n            ]),\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerComponent, decorators: [{\n            type: Component,\n            args: [{ selector: \"ngx-spinner\", changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger(\"fadeIn\", [\n                            state(\"in\", style({ opacity: 1 })),\n                            transition(\":enter\", [style({ opacity: 0 }), animate(300)]),\n                            transition(\":leave\", animate(200, style({ opacity: 0 }))),\n                        ]),\n                    ], template: \"<div\\n  [@.disabled]=\\\"disableAnimation\\\"\\n  [@fadeIn]=\\\"'in'\\\"\\n  *ngIf=\\\"spinner.show\\\"\\n  class=\\\"ngx-spinner-overlay\\\"\\n  [style.background-color]=\\\"spinner.bdColor\\\"\\n  [style.z-index]=\\\"spinner.zIndex\\\"\\n  [style.position]=\\\"spinner.fullScreen ? 'fixed' : 'absolute'\\\"\\n  #overlay\\n>\\n  <div *ngIf=\\\"!template\\\" [class]=\\\"spinner.class\\\" [style.color]=\\\"spinner.color\\\">\\n    <div *ngFor=\\\"let index of spinner.divArray\\\"></div>\\n  </div>\\n  <div *ngIf=\\\"template\\\" [innerHTML]=\\\"template | safeHtml\\\"></div>\\n  <div class=\\\"loading-text\\\" [style.z-index]=\\\"spinner.zIndex\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</div>\\n\", styles: [\".ngx-spinner-overlay{position:fixed;top:0;left:0;width:100%;height:100%}.ngx-spinner-overlay>div:not(.loading-text){top:50%;left:50%;margin:0;position:absolute;transform:translate(-50%,-50%)}.loading-text{position:absolute;top:60%;left:50%;transform:translate(-50%,-60%)}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: NgxSpinnerService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [NGX_SPINNER_CONFIG]\n                }] }]; }, propDecorators: { bdColor: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], fullScreen: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], zIndex: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], showSpinner: [{\n                type: Input\n            }], disableAnimation: [{\n                type: Input\n            }], spinnerDOM: [{\n                type: ViewChild,\n                args: [\"overlay\"]\n            }] } });\n\nclass NgxSpinnerModule {\n    static forRoot(config) {\n        return {\n            ngModule: NgxSpinnerModule,\n            providers: [{ provide: NGX_SPINNER_CONFIG, useValue: config }],\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerModule, declarations: [NgxSpinnerComponent, SafeHtmlPipe], imports: [CommonModule], exports: [NgxSpinnerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [NgxSpinnerComponent, SafeHtmlPipe],\n                    exports: [NgxSpinnerComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-spinner\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULTS, LOADERS, NgxSpinner, NgxSpinnerComponent, NgxSpinnerModule, NgxSpinnerService, PRIMARY_SPINNER };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}